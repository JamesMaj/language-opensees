'scopeName': 'source.opensees'
'name': 'OpenSees'
'fileTypes': ['tcl']

'patterns': [
  # ========================================================================== #
  #                         OPENSEES SPECIFIC GRAMMARS                         #
  # ========================================================================== #
  {
    'captures':
      '1':
        'name': 'storage.type.class.opensees'
    'match': '(?<=^|[\\[{;])\\s*(model|node|element|fix|fix[X|Y|Z]|equalDOF|rigidDiaphragm|rigidLink|timeSeries|pattern|mass|block|block2D|block3D|region|rayleigh|ShallowFoundationGen|uniaxialMaterial|nDMaterial|section|frictionModel|geomTransf)\\b'
  }
  {
    'captures':
      '1':
        'name': 'storage.type.function.opensees'
    'match': '(?<=^|[\\[{;])\\s*(load|eleLoad|sp|groundMotion|imposedMotion|fiber|patch|layer)\\b'
  }
  {
    'captures':
      '1':
        'name': 'support.class.opensees'
    'match': '(?<=^|[\\[{;])\\s*(constraints|numberer|system|test|algorithm|integrator|analysis|eigen|analyze)\\b'
  }
  {
    'captures':
      '1':
        'name': 'support.class.opensees'
    'match': '(?<=^|[\\[{;])\\s*(eleNodes|eleResponse|getEleTags|getNodeTags|getTime|logFile|nodeAccel|nodeBounds|nodeCoord|nodeDisp|nodeEigenvector|nodeVel|print|print|printA|recorder|record)\\b'
  }
  {
    'captures':
      '1':
        'name': 'support.function.opensees'
    'match': '(?<=^|[\\[{;])\\s*(exit|loadConst|remove|reset|setMaxOpenFiles|setTime|testIter|testNorms|wipe|wipeAnalysis)\\b'
  }
  # ========================================================================== #
  #                           TCL SPECIFIC GRAMMARS                            #
  # ========================================================================== #
  {
    'match': '\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b'
    'name': 'constant.numeric.opensees'
  }
  {
    'begin': '(?<=^|;)\\s*((#))'
    'beginCaptures':
      '1':
        'name': 'comment.line.number-sign.opensees'
      '2':
        'name': 'punctuation.definition.comment.opensees'
    'contentName': 'comment.line.number-sign.opensees'
    'end': '\\n'
    'patterns': [
      {
        'match': '(\\\\\\\\|\\\\\\n)'
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.opensees'
    'match': '(?<=^|[\\[{;])\\s*(if|while|for|catch|return|break|continue|switch|exit|foreach)\\b'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.opensees'
    'match': '(?<=^|})\\s*(then|elseif|else)\\b'
  }
  {
    'captures':
      '1':
        'name': 'keyword.other.opensees'
      '2':
        'name': 'entity.name.function.opensees'
    'match': '^\\s*(proc)\\s+([^\\s]+)'
  }
  {
    'captures':
      '1':
        'name': 'keyword.other.opensees'
    'match': '(?<=^|[\\[{;])\\s*(after|append|array|auto_execok|auto_import|auto_load|auto_mkindex|auto_mkindex_old|auto_qualify|auto_reset|bgerror|binary|cd|clock|close|concat|dde|encoding|eof|error|eval|exec|expr|fblocked|fconfigure|fcopy|file|fileevent|filename|flush|format|gets|glob|global|history|http|incr|info|interp|join|lappend|library|lindex|linsert|list|llength|load|lrange|lreplace|lsearch|lset|lsort|memory|msgcat|namespace|open|package|parray|pid|pkg::create|pkg_mkIndex|proc|puts|pwd|re_syntax|read|registry|rename|resource|scan|seek|set|socket|SafeBase|source|split|string|subst|Tcl|tcl_endOfWord|tcl_findLibrary|tcl_startOfNextWord|tcl_startOfPreviousWord|tcl_wordBreakAfter|tcl_wordBreakBefore|tcltest|tclvars|tell|time|trace|unknown|unset|update|uplevel|upvar|variable|vwait)\\b'
  }
  {
    'begin': '(?<=^|[\\[{;])\\s*(regexp|regsub)\\b\\s*'
    'beginCaptures':
      '1':
        'name': 'keyword.other.opensees'
    'comment': 'special-case regexp/regsub keyword in order to handle the expression'
    'end': '[\\n;\\]]'
    'patterns': [
      {
        'match': '\\\\(?:.|\\n)'
        'name': 'constant.character.escape.opensees'
      }
      {
        'comment': 'switch for regexp'
        'match': '-\\w+\\s*'
      }
      {
        'applyEndPatternLast': 1
        'begin': '--\\s*\\w+'
        'comment': 'end of switches'
        'end': ''
        'patterns': [
          {
            'include': '#regexp'
          }
        ]
      }
      {
        'include': '#regexp'
      }
    ]
  }
  {
    'include': '#escape'
  }
  {
    'include': '#variable'
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.opensees'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.opensees'
    'name': 'string.quoted.double.opensees'
    'patterns': [
      {
        'include': '#escape'
      }
      {
        'include': '#variable'
      }
      {
        'include': '#embedded'
      }
    ]
  }
]
'repository':
  'bare-string':
    'begin': '(?:^|(?<=\\s))"'
    'comment': 'matches a single quote-enclosed word without scoping'
    'end': '"([^\\s\\]]*)'
    'endCaptures':
      '1':
        'name': 'invalid.illegal.opensees'
    'patterns': [
      {
        'include': '#escape'
      }
      {
        'include': '#variable'
      }
    ]
  'braces':
    'begin': '(?:^|(?<=\\s))\\{'
    'comment': 'matches a single brace-enclosed word'
    'end': '\\}([^\\s\\]]*)'
    'endCaptures':
      '1':
        'name': 'invalid.illegal.opensees'
    'patterns': [
      {
        'match': '\\\\[{}\\n]'
        'name': 'constant.character.escape.opensees'
      }
      {
        'include': '#inner-braces'
      }
    ]
  'embedded':
    'begin': '\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.section.embedded.begin.opensees'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.section.embedded.end.opensees'
    'name': 'source.opensees.embedded'
    'patterns': [
      {
        'include': 'source.opensees'
      }
    ]
  'escape':
    'match': '\\\\(\\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\\n)'
    'name': 'constant.character.escape.opensees'
  'inner-braces':
    'begin': '\\{'
    'comment': 'matches a nested brace in a brace-enclosed word'
    'end': '\\}'
    'patterns': [
      {
        'match': '\\\\[{}\\n]'
        'name': 'constant.character.escape.opensees'
      }
      {
        'include': '#inner-braces'
      }
    ]
  'regexp':
    'begin': '(?=\\S)(?![\\n;\\]])'
    'comment': 'matches a single word, named as a regexp, then swallows the rest of the command'
    'end': '(?=[\\n;\\]])'
    'patterns': [
      {
        'begin': '(?=[^ \\t\\n;])'
        'end': '(?=[ \\t\\n;])'
        'name': 'string.regexp.opensees'
        'patterns': [
          {
            'include': '#braces'
          }
          {
            'include': '#bare-string'
          }
          {
            'include': '#escape'
          }
          {
            'include': '#variable'
          }
          {
            'include': '#string'
          }
        ]
      }
      {
        'begin': '[ \\t]'
        'comment': 'swallow the rest of the command'
        'end': '(?=[\\n;\\]])'
        'patterns': [
          {
            'include': '#variable'
          }
          {
            'include': '#embedded'
          }
          {
            'include': '#escape'
          }
          {
            'include': '#braces'
          }
          {
            'include': '#inner-braces'
          }
        ]
      }
    ]
  'string':
    'applyEndPatternLast': 1
    'begin': '(?:^|(?<=\\s))(?=")'
    'comment': 'matches a single quote-enclosed word with scoping'
    'end': ''
    'name': 'string.quoted.double.opensees'
    'patterns': [
      {
        'include': '#bare-string'
      }
    ]
  'variable':
    'captures':
      '1':
        'name': 'punctuation.definition.variable.opensees'
    'match': '(\\$)((?:[a-zA-Z0-9_]|::)+(\\([^\\)]+\\))?|\\{[^\\}]*\\})'
    'name': 'variable.other.opensees'
